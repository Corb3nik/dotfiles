" General Settings
set tabstop=2       " Tabs = 2 spaces
set shiftwidth=2    " Shifting with '>>' = 2 spaces
set expandtab       " Tabs are spaces
set number          " Show line numbers
set relativenumber  " Set relative line numbering
set showmatch       " Show matching brackets
set incsearch       " Search as you type
set ignorecase      " Case insensitive search
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. "

" Leader Key
let mapleader = ","

" Using arrows is for the weak
nnoremap <Leader><space> :noh<cr>
map <Left>  :echo "use h!"<cr>
map <Right> :echo "use l!"<cr>
map <Up>    :echo "use k!"<cr>
map <Down>  :echo "use j!"<cr>

" Stupid shift key fixes
if has("user_commands")
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

" Add sign column
set signcolumn=number

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Automatically Strip trailing whitespace on save
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Vim Plug - Plugin Installation
" https://github.com/junegunn/vim-plug
call plug#begin('~/.local/share/nvim/plugged')

  " https://github.com/tpope/vim-eunuch
  Plug 'tpope/vim-eunuch'

  " https://github.com/ctrlpvim/ctrlp.vim
  Plug 'ctrlpvim/ctrlp.vim'

  " https://github.com/tpope/vim-commentary
  Plug 'tpope/vim-commentary'

  " https://github.com/JamshedVesuna/vim-markdown-preview
  Plug 'JamshedVesuna/vim-markdown-preview'

  " https://github.com/frankier/neovim-colors-solarized-truecolor-only/
  Plug 'frankier/neovim-colors-solarized-truecolor-only'

  " https://github.com/terryma/vim-multiple-cursors
  Plug 'terryma/vim-multiple-cursors'

  " https://github.com/posva/vim-vue
  Plug 'posva/vim-vue'

  " https://github.com/digitaltoad/vim-pug
  Plug 'digitaltoad/vim-pug'

  " https://github.com/cakebaker/scss-syntax.vim
  Plug 'cakebaker/scss-syntax.vim'

  " https://github.com/leafgarland/typescript-vim
  Plug 'leafgarland/typescript-vim'

  " https://github.com/pangloss/vim-javascript
  Plug 'pangloss/vim-javascript'

  " https://github.com/neoclide/coc.nvim
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Initialize plugin system
call plug#end()


" Plugin Settings
" Solarized
syntax enable
set background=dark
colorscheme solarized

" CtrP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
  \ 'dir':  'node_modules\|coverage\|build',
\ }

" Vim-Commentary
vmap <Bslash><Bslash> gc
nmap <Bslash><Bslash> gcgc
autocmd FileType python setlocal commentstring=#\ %s

" Markdown Preview
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Firefox'
let vim_markdown_preview_github=1

" Vim-Vue
let g:vue_pre_processors = ['pug', 'scss', 'typescript']

" CoC
  " Give more space for displaying messages."
  set cmdheight=2

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Extensions list
  let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-tsserver',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-vetur',
  \ ]

" Filetype specific settings
autocmd FileType python setlocal shiftwidth=4 softtabstop=4
autocmd FileType java setlocal shiftwidth=2 softtabstop=2
